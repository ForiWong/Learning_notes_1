1、ViewModel
ViewModel的创建方式关系到作用，巧妙使用；
ViewModel的复用，不同业务的响应逻辑线不同；

（1）T vm = ViewModelProviders.of(context).get(clazz);//方法已废弃
ViewModelProviders.of(context)  <-->  new ViewModelProvider(activity);
也就是这个方式，和（2）实际上是一样的。

（2）//在activity中创建vm
T vm2 = new ViewModelProvider(context).get(clazz);
//一般在Activity中使用，它只会被创建一次。打印一下日志?

//在Fragment中创建ViewModel
EditUserInfoViewModel vm3 = new ViewModelProvider(requireActivity(), new ViewModelProvider.NewInstanceFactory()).get(EditUserInfoViewModel.class);
//@method requireActivity() --> Return the {@link FragmentActivity} this fragment is currently associated with.
//它也只有一个实例，被用于多个Fragment的数据共享。

当我们使用 ViewModelProviders 在活动中实例化 MyViewModel 时，从未没用过 MyViewModel 的构造方法，而都是使用ViewModelProviders
这个类中的方法。ViewModelProviders 在内部为我们管理并调用 ViewModel的主构造函数，创建viewmodel的实例并将该实例并返回。

ViewModelProviders 的 of() 方法，在内部创建了默认的 ViewModelProvider.Factory ，从而实现了 ViewModel 的无参创建。所以，当我们
在构造方法添加参数时， ViewModelProvider.Factory 的内部无法实例化 ViewModel 对象，因为ViewModelProvider.Factory 调用主构造方法
创建 ViewModel’s 实例而失败。

什么是 ViewModelProvider.Factory? 需要传递参数给的vm的情况。
ViewModelProviders.Factory 接口是负责实例化 ViewModels 对象的启动装置。这意味着你需要自己写实例化 ViewModel 对象的方法。

MyFactory factory = new MyFactory(12);
EditUserInfoViewModel viewModel1 = ViewModelProviders.of(this, factory).get(EditUserInfoViewModel.class);
我们将参数或者依赖关系转入我们的 ViewModelProvider.Factory 以便于它能够为我们创建 ViewModel，
ViewModelProviders.of( context, instanceOfViewModelFactory) 方法获得我们 ViewModelProvider.Factory 实例，现在就像之前
的例子中一样，我们已经学会了创建 ViewModel 实例的过程。

//什么时候选择使用factory创建ViewModel

//这个key的作用？
EditUserInfoViewModel viewModel2 = ViewModelProviders.of(this, factory).get("key", EditUserInfoViewModel.class);
相同的scope，不同的key会创建不同的ViewModel;

     * Returns an existing ViewModel or creates a new one in the scope (usually, a fragment or
     * an activity), associated with this {@code ViewModelProvider}.
     * <p>
     * The created ViewModel is associated with the given scope and will be retained
     * as long as the scope is alive (e.g. if it is an activity, until it is
     * finished or process is killed).
     //返回一个存在的vm,或者创建一个新的vm,在关联的范围内（Fragment或activity），关联的。
     //vm与scope关联，只要scope是存活的，就是会返回的这个实例。

@param key        The key to use to identify the ViewModel.

(3)//父类AndroidViewModel的构造函数
//这个方式是完全错误的，不能起到VM的作用。
//为什么呢？生命周期就不同了，也没法实现共享。
new EditUserInfoViewModel(this.getApplication(), new EditUserInfoModel());

（4）public class AndroidViewModel extends ViewModel { ... }
AndroidViewModel 与 ViewModel的区别

（5）viewModel的特点：
   1、生命周期自动感知，onClear回调函数处理资源回收closeWithRuntimeException，ViewModel绝对不能引用View、
   Lifecycle或任何可能包含对Activity上下文的引用的类
   2、用于fragment之间的数据共享
   3、viewmodel+livedata+room 数据感知，绘制UI

ViewModel 可以将数据层与 UI 分离，而这种架构不仅可以简化 UI 的生命周期的控制，也能让代码获得更好的可测试性。
生命周期管理库 (Lifecycles) 由三个组件构成，包括 Lifecycle、LiveData 和 ViewModel。它可以用来解决常见的生命周期问题，
同时使您的应用程序易于测试且可维护。
（1）ViewModel 用于提供和管理 UI 界面的数据。通过使用 ViewModel，开发者可以方便的将 UI 界面和数据逻辑剥离开来，从而达到
 UI 界面 Activity 和 Fragment 负责显示数据和处理用户操作；ViewModel 则负责提供和管理 UI 界面的数据，并且负责和数据层通讯
 的效果。与此同时，也让您在开发过程中更好地遵循单一职责的设计原则。
（2）此外，ViewModel 的另一大特点是它不会因为配置变更而销毁。

ViewModel 管理UI界面数据
Activity显示界面数据，获取用户操作
Repository 保存和载入数据的唯一接口

接着把曾经保存在 UI 界面中的数据剥离出来，使用 ViewModel 来管理这些数据。如果您需要自定义 ViewModel 的构造函数，则使用 ViewModelProvider.NewInstanceFactory。

使用默认的构造函数获得ViewModel之后立即给 数据赋值。
或者使用ViewModelFactory来创建自定义的构造函数。

我们还推荐开发者同时使用 ViewModel 和另一个生命周期组件 LiveData 来实现响应式的 UI 界面。

注意事项：不要在 ViewModel 中引用 View，不要引用Context,否则可能导致内存泄漏。
使用 LiveData 来通知界面更新；不要混淆 ViewModel 和 onSaveInstanceState 方法的用途

ViewModels + LiveData = 响应式UI；

2、MutableLiveData 可变的实时数据，继承自LiveData
public class MutableLiveData<T> extends LiveData<T> { ... }

