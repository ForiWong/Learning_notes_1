##
AtomicInteger类是系统底层保护的int类型，通过提供执行方法的控制进行值的原子操作。
//初始值是 0
AtomicInteger atomicInteger = new AtomicInteger();
//初始值是 100
AtomicInteger atomicInteger = new AtomicInteger(100);
int currentValue = atomicInteger.get();         //100
atomicInteger.set(1234);

addAndGet()- 以原子方式将给定值添加到当前值，并在添加后返回新值。
getAndAdd() - 以原子方式将给定值添加到当前值并返回旧值。
incrementAndGet()- 以原子方式将当前值递增1并在递增后返回新值。它相当于i ++操作。
getAndIncrement() - 以原子方式递增当前值并返回旧值。它相当于++ i操作。
decrementAndGet()- 原子地将当前值减1并在减量后返回新值。它等同于i-操作。
getAndDecrement() - 以原子方式递减当前值并返回旧值。它相当于-i操作。

##
1.概述 BLE 连接过程中有三个重要的数据包：
SCAN_REQ、SCAN_RSP、CONNECT_REQ
SCAN_REQ： 扫描请求，由主设备（MASTER DEVICE）向从设备（SLAVE DEVICE）发出，目的是为了获得从设备的响应以得到更多的从设备广播数据信息（包括设备名字，或者服务UUID，及其它如厂家特定格式的信息（如硬件版本，软件版本号，设备系列号等等）。
SCAN_RSP:从设备对就主设备发起的SCAN_REQ的响应，作为广播包的补充，从设备可以给主设备更多的广播数据，比如说，有些设备在广播 包里面没有设备名字，这个时候就可以把设备名字放在这个包里面发给主设备。
CONNECT_REQ：
主设备向从设备发出连接请求。至此连接建立完成（从设备不会响应这个请求），如果从设备没有连接上面的问题的话，以后 主从双方会开始相互交换有效数据（基于GAP,GATT及SMP协议）或者交换空包。 以下对这三个数据包进行详细解读。

2.BLE单次写的数据量大小是有限制的，通常是20字节，可以尝试通过requestMTU增大，但不保证能成功。分包写是一种解决方案，需要定义分包协议，假设每个包大小20字节，分两种包，数据包和非数据包。
对于数据包，头两个字节表示包的序号，剩下的都填充数据。对于非数据包，主要是发送一些控制信息。

总体流程如下：
1、发端发送控制包，告诉对方要发送的总的包数
2、收端回一个ACK包，表示准备好了，对方可以发送了
3、发端开始批量发送数据，为了速度，不需要对端回复
4、收端收到最后一个包或超时后，开始检查还缺哪些包，然后回复ACK，带上丢的包序号
5、发端重发丢的包
6、收端全部收到，回复ACK，CRC校验，包数据拼接好了传到上层
这里面核心是状态机，另外要注意对于BLE来说，主端和从端都可以收发数据，但是是非对称的。对主端来说，发是write characteristic，收是onCharacteristicChanged，对从端来说，发是sendNotify，收是onCharacteristicWrite。尽管如此，但是协议部分是相同的，所以我们要抽象成两层，底层是收发的物理层，上层是分包的协议层，再上层就是业务层。



客户端：
（1）onCrate()
初始化BtClient mClient = new BtClient(this);
注册蓝牙广播
开始搜索蓝牙
	BluetoothAdapter.getDefaultAdapter().startDiscovery();

（2）点击事件

连接
mClient.connect(dev);
	创建BluetoothSocket 明文或加密
	循环读取

发送信息

（3）onDestroy
注销广播 unregisterReceiver(mBtReceiver);

##
ShimmerTextView 炫酷动画效果的text view
闪烁的布局: https://github.com/team-supercharge/ShimmerLayout

